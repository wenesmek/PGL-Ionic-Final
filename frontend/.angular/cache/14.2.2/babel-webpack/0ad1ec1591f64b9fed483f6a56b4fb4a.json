{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.cordovaSQLiteDriver = factory();\n})(this, function () {\n  'use strict';\n\n  function getSerializerPromise(localForageInstance) {\n    if (getSerializerPromise.result) {\n      return getSerializerPromise.result;\n    }\n\n    if (!localForageInstance || typeof localForageInstance.getSerializer !== 'function') {\n      return Promise.reject(new Error('localforage.getSerializer() was not available! ' + 'localforage v1.4+ is required!'));\n    }\n\n    getSerializerPromise.result = localForageInstance.getSerializer();\n    return getSerializerPromise.result;\n  }\n\n  function getDriverPromise(localForageInstance, driverName) {\n    getDriverPromise.result = getDriverPromise.result || {};\n\n    if (getDriverPromise.result[driverName]) {\n      return getDriverPromise.result[driverName];\n    }\n\n    if (!localForageInstance || typeof localForageInstance.getDriver !== 'function') {\n      return Promise.reject(new Error('localforage.getDriver() was not available! ' + 'localforage v1.4+ is required!'));\n    }\n\n    getDriverPromise.result[driverName] = localForageInstance.getDriver(driverName);\n    return getDriverPromise.result[driverName];\n  }\n\n  function getWebSqlDriverPromise(localForageInstance) {\n    return getDriverPromise(localForageInstance, localForageInstance.WEBSQL);\n  }\n  /* global document, sqlitePlugin */\n  // we can't import this, since it gets defined later\n  // import sqlitePlugin from 'sqlitePlugin';\n\n\n  var deviceReady = new Promise(function (resolve, reject) {\n    if (typeof sqlitePlugin !== 'undefined') {\n      resolve();\n    } else if (typeof cordova === 'undefined') {\n      reject(new Error('cordova is not defined.'));\n    } else {\n      // Wait for Cordova to load\n      document.addEventListener(\"deviceready\", function () {\n        return resolve();\n      }, false);\n    }\n  });\n  var deviceReadyDone = deviceReady.catch(function () {\n    return Promise.resolve();\n  });\n\n  function getOpenDatabasePromise() {\n    return deviceReadyDone.then(function () {\n      if (typeof sqlitePlugin !== 'undefined' && typeof sqlitePlugin.openDatabase === 'function') {\n        return sqlitePlugin.openDatabase;\n      } else {\n        throw new Error('SQLite plugin is not present.');\n      }\n    });\n  }\n  /*\n   * Includes code from:\n   *\n   * localForage - websql driver\n   * https://github.com/mozilla/localforage\n   *\n   * Copyright (c) 2015 Mozilla\n   * Licensed under Apache 2.0 license.\n   *\n   */\n  // import localforage from 'localforage';\n  // // If cordova is not present, we can stop now.\n  // if (!globalObject.cordova) {\n  //     return;\n  // }\n  // Open the cordova sqlite plugin database (automatically creates one if one didn't\n  // previously exist), using any options set in the config.\n\n\n  function _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n      db: null\n    };\n\n    if (options) {\n      for (var i in options) {\n        dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n      }\n    }\n\n    var dbInfoPromise = getOpenDatabasePromise().then(function (openDatabase) {\n      return new Promise(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n          dbInfo.location = dbInfo.location || 'default';\n          dbInfo.db = openDatabase({\n            name: dbInfo.name,\n            version: String(dbInfo.version),\n            description: dbInfo.description,\n            size: dbInfo.size,\n            key: dbInfo.dbKey,\n            location: dbInfo.location\n          });\n        } catch (e) {\n          reject(e);\n        } // Create our key/value table if it doesn't exist.\n\n\n        dbInfo.db.transaction(function (t) {\n          t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' (id INTEGER PRIMARY KEY, key unique, value)', [], function () {\n            self._dbInfo = dbInfo;\n            resolve();\n          }, function (t, error) {\n            reject(error);\n          });\n        });\n      });\n    });\n    var serializerPromise = getSerializerPromise(self);\n    var webSqlDriverPromise = getWebSqlDriverPromise(self);\n    return Promise.all([serializerPromise, webSqlDriverPromise, dbInfoPromise]).then(function (results) {\n      dbInfo.serializer = results[0];\n      return dbInfoPromise;\n    });\n  }\n\n  var cordovaSQLiteDriver = {\n    _driver: 'cordovaSQLiteDriver',\n    _initStorage: _initStorage,\n    _support: function _support() {\n      return getOpenDatabasePromise().then(function (openDatabase) {\n        return !!openDatabase;\n      }).catch(function () {\n        return false;\n      });\n    }\n  };\n\n  function wireUpDriverMethods(driver) {\n    var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'];\n\n    function wireUpDriverMethod(driver, methodName) {\n      driver[methodName] = function () {\n        var localForageInstance = this;\n        var args = arguments;\n        return getWebSqlDriverPromise(localForageInstance).then(function (webSqlDriver) {\n          return webSqlDriver[methodName].apply(localForageInstance, args);\n        });\n      };\n    }\n\n    for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n      wireUpDriverMethod(driver, LibraryMethods[i]);\n    }\n  }\n\n  wireUpDriverMethods(cordovaSQLiteDriver);\n  return cordovaSQLiteDriver;\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","cordovaSQLiteDriver","getSerializerPromise","localForageInstance","result","getSerializer","Promise","reject","Error","getDriverPromise","driverName","getDriver","getWebSqlDriverPromise","WEBSQL","deviceReady","resolve","sqlitePlugin","cordova","document","addEventListener","deviceReadyDone","catch","getOpenDatabasePromise","then","openDatabase","_initStorage","options","self","dbInfo","db","i","toString","dbInfoPromise","location","name","version","String","description","size","key","dbKey","e","transaction","t","executeSql","storeName","_dbInfo","error","serializerPromise","webSqlDriverPromise","all","results","serializer","_driver","_support","wireUpDriverMethods","driver","LibraryMethods","wireUpDriverMethod","methodName","args","arguments","webSqlDriver","apply","len","length"],"sources":["/home/zining/Data/Proyectos/Ionic/UT1-pgl/frontend/node_modules/localforage-cordovasqlitedriver/dist/localforage-cordovasqlitedriver.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.cordovaSQLiteDriver = factory());\n}(this, (function () { 'use strict';\n\nfunction getSerializerPromise(localForageInstance) {\n    if (getSerializerPromise.result) {\n        return getSerializerPromise.result;\n    }\n    if (!localForageInstance || typeof localForageInstance.getSerializer !== 'function') {\n        return Promise.reject(new Error('localforage.getSerializer() was not available! ' + 'localforage v1.4+ is required!'));\n    }\n    getSerializerPromise.result = localForageInstance.getSerializer();\n    return getSerializerPromise.result;\n}\n\nfunction getDriverPromise(localForageInstance, driverName) {\n    getDriverPromise.result = getDriverPromise.result || {};\n    if (getDriverPromise.result[driverName]) {\n        return getDriverPromise.result[driverName];\n    }\n    if (!localForageInstance || typeof localForageInstance.getDriver !== 'function') {\n        return Promise.reject(new Error('localforage.getDriver() was not available! ' + 'localforage v1.4+ is required!'));\n    }\n    getDriverPromise.result[driverName] = localForageInstance.getDriver(driverName);\n    return getDriverPromise.result[driverName];\n}\n\nfunction getWebSqlDriverPromise(localForageInstance) {\n    return getDriverPromise(localForageInstance, localForageInstance.WEBSQL);\n}\n\n/* global document, sqlitePlugin */\n// we can't import this, since it gets defined later\n// import sqlitePlugin from 'sqlitePlugin';\n\nvar deviceReady = new Promise(function (resolve, reject) {\n    if (typeof sqlitePlugin !== 'undefined') {\n        resolve();\n    } else if (typeof cordova === 'undefined') {\n        reject(new Error('cordova is not defined.'));\n    } else {\n        // Wait for Cordova to load\n        document.addEventListener(\"deviceready\", function () {\n            return resolve();\n        }, false);\n    }\n});\n\nvar deviceReadyDone = deviceReady.catch(function () {\n    return Promise.resolve();\n});\n\nfunction getOpenDatabasePromise() {\n    return deviceReadyDone.then(function () {\n        if (typeof sqlitePlugin !== 'undefined' && typeof sqlitePlugin.openDatabase === 'function') {\n            return sqlitePlugin.openDatabase;\n        } else {\n            throw new Error('SQLite plugin is not present.');\n        }\n    });\n}\n\n/*\n * Includes code from:\n *\n * localForage - websql driver\n * https://github.com/mozilla/localforage\n *\n * Copyright (c) 2015 Mozilla\n * Licensed under Apache 2.0 license.\n *\n */\n// import localforage from 'localforage';\n// // If cordova is not present, we can stop now.\n// if (!globalObject.cordova) {\n//     return;\n// }\n\n// Open the cordova sqlite plugin database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = getOpenDatabasePromise().then(function (openDatabase) {\n        return new Promise(function (resolve, reject) {\n            // Open the database; the openDatabase API will automatically\n            // create it for us if it doesn't exist.\n            try {\n                dbInfo.location = dbInfo.location || 'default';\n                dbInfo.db = openDatabase({\n                    name: dbInfo.name,\n                    version: String(dbInfo.version),\n                    description: dbInfo.description,\n                    size: dbInfo.size,\n                    key: dbInfo.dbKey,\n                    location: dbInfo.location\n                });\n            } catch (e) {\n                reject(e);\n            }\n\n            // Create our key/value table if it doesn't exist.\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' (id INTEGER PRIMARY KEY, key unique, value)', [], function () {\n                    self._dbInfo = dbInfo;\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        });\n    });\n\n    var serializerPromise = getSerializerPromise(self);\n    var webSqlDriverPromise = getWebSqlDriverPromise(self);\n\n    return Promise.all([serializerPromise, webSqlDriverPromise, dbInfoPromise]).then(function (results) {\n        dbInfo.serializer = results[0];\n        return dbInfoPromise;\n    });\n}\n\nvar cordovaSQLiteDriver = {\n    _driver: 'cordovaSQLiteDriver',\n    _initStorage: _initStorage,\n    _support: function _support() {\n        return getOpenDatabasePromise().then(function (openDatabase) {\n            return !!openDatabase;\n        }).catch(function () {\n            return false;\n        });\n    }\n};\n\nfunction wireUpDriverMethods(driver) {\n    var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'];\n\n    function wireUpDriverMethod(driver, methodName) {\n        driver[methodName] = function () {\n            var localForageInstance = this;\n            var args = arguments;\n            return getWebSqlDriverPromise(localForageInstance).then(function (webSqlDriver) {\n                return webSqlDriver[methodName].apply(localForageInstance, args);\n            });\n        };\n    }\n\n    for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n        wireUpDriverMethod(driver, LibraryMethods[i]);\n    }\n}\n\nwireUpDriverMethods(cordovaSQLiteDriver);\n\nreturn cordovaSQLiteDriver;\n\n})));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}