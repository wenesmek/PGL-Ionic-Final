{"ast":null,"code":"import _asyncToGenerator from \"/home/zining/Data/Proyectos/Ionic/UT1-pgl/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { tap } from 'rxjs/operators';\nimport { Storage } from '@ionic/storage';\nlet AuthService = class AuthService {\n  constructor(httpClient, storage) {\n    this.httpClient = httpClient;\n    this.storage = storage;\n    this.endpoint = 'http://localhost:8080/api/users/';\n  }\n\n  register(user) {\n    var _this = this;\n\n    console.log('desde servicio:' + user);\n    return this.httpClient.post(this.endpoint, user, this.getOptions(user)).pipe(tap( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (res) {\n        if (res.user) {\n          yield _this.storage.set('token', res.access_token);\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()));\n  }\n\n  login(user) {\n    var _this2 = this;\n\n    return this.httpClient.post(this.endpoint, null, this.getOptions(user)).pipe(tap( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (res) {\n        if (res.user) {\n          yield _this2.storage.set('token', res.access_token); // await this.storage.set(\"idUser\", res.user.id);\n        }\n      });\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()));\n  }\n\n  logout() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.storage.remove('token');\n    })();\n  }\n\n  isLoggedIn() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // return this.authSubject.asObservable();\n      const token = yield _this4.storage.get('token');\n\n      if (token) {\n        //Just check if exists. This should be checked with current date\n        return true;\n      }\n\n      return false;\n    })();\n  }\n\n  getOptions(user) {\n    const base64UserAndPassword = window.btoa(user.username + ':' + user.password);\n    const basicAccess = 'Basic ' + base64UserAndPassword;\n    const options = {\n      headers: {\n        'Authorization': basicAccess,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      } //, withCredentials: true\n\n    };\n    return options;\n  }\n\n};\n\nAuthService.ctorParameters = () => [{\n  type: HttpClient\n}, {\n  type: Storage\n}];\n\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"mappings":";;AAAA,SAASA,UAAT,QAA2B,sBAA3B;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,SAASC,GAAT,QAAqB,gBAArB;AAGA,SAASC,OAAT,QAAwB,gBAAxB;IAKaC,WAAW,SAAXA,WAAW;EAMtBC,YAAqBC,UAArB,EAAuDC,OAAvD,EAAwE;IAAnD;IAAkC;IAFvD,gBAAa,kCAAb;EAE6E;;EAI7EC,QAAQ,CAACC,IAAD,EAAW;IAAA;;IACjBC,OAAO,CAACC,GAAR,CAAY,oBAAoBF,IAAhC;IACA,OAAO,KAAKH,UAAL,CAAgBM,IAAhB,CAAmC,KAAKC,QAAxC,EAAkDJ,IAAlD,EAAwD,KAAKK,UAAL,CAAgBL,IAAhB,CAAxD,EAA+EM,IAA/E,CACLb,GAAG;MAAA,6BAAC,WAAOc,GAAP,EAA8B;QAEhC,IAAIA,GAAG,CAACP,IAAR,EAAc;UACZ,MAAM,KAAI,CAACF,OAAL,CAAaU,GAAb,CAAiB,OAAjB,EAA0BD,GAAG,CAACE,YAA9B,CAAN;QACD;MACF,CALE;;MAAA;QAAA;MAAA;IAAA,IADE,CAAP;EASD;;EAEDC,KAAK,CAACV,IAAD,EAAW;IAAA;;IACd,OAAO,KAAKH,UAAL,CAAgBM,IAAhB,CAAqB,KAAKC,QAA1B,EAAoC,IAApC,EAA0C,KAAKC,UAAL,CAAgBL,IAAhB,CAA1C,EAAiEM,IAAjE,CACLb,GAAG;MAAA,8BAAC,WAAOc,GAAP,EAA4B;QAE9B,IAAIA,GAAG,CAACP,IAAR,EAAc;UACZ,MAAM,MAAI,CAACF,OAAL,CAAaU,GAAb,CAAiB,OAAjB,EAA0BD,GAAG,CAACE,YAA9B,CAAN,CADY,CAGZ;QACD;MACF,CAPE;;MAAA;QAAA;MAAA;IAAA,IADE,CAAP;EAUD;;EAEKE,MAAM;IAAA;;IAAA;MACV,MAAM,MAAI,CAACb,OAAL,CAAac,MAAb,CAAoB,OAApB,CAAN;IADU;EAEX;;EAEKC,UAAU;IAAA;;IAAA;MACd;MACA,MAAMC,KAAK,SAAS,MAAI,CAAChB,OAAL,CAAaiB,GAAb,CAAiB,OAAjB,CAApB;;MACA,IAAID,KAAJ,EAAU;QAAE;QACV,OAAO,IAAP;MACD;;MACD,OAAO,KAAP;IANc;EAOf;;EAEOT,UAAU,CAACL,IAAD,EAAW;IAC3B,MAAMgB,qBAAqB,GAAGC,MAAM,CAACC,IAAP,CAAYlB,IAAI,CAACmB,QAAL,GAAgB,GAAhB,GAAsBnB,IAAI,CAACoB,QAAvC,CAA9B;IAEA,MAAMC,WAAW,GAAG,WAAWL,qBAA/B;IAEA,MAAMM,OAAO,GAAG;MACdC,OAAO,EAAE;QACP,iBAAkBF,WADX;QAEP,gBAAiB;MAFV,CADK,CAKd;;IALc,CAAhB;IAQA,OAAOC,OAAP;EACD;;AA/DqB;;;;;;;;AAAX3B,WAAW,eAHvBH,UAAU,CAAC;EACVgC,UAAU,EAAE;AADF,CAAD,CAGa,GAAX7B,WAAW,CAAX;SAAAA","names":["HttpClient","Injectable","tap","Storage","AuthService","constructor","httpClient","storage","register","user","console","log","post","endpoint","getOptions","pipe","res","set","access_token","login","logout","remove","isLoggedIn","token","get","base64UserAndPassword","window","btoa","username","password","basicAccess","options","headers","providedIn"],"sourceRoot":"","sources":["/home/zining/Data/Proyectos/Ionic/UT1-pgl/frontend/src/app/auth/auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from  'rxjs/operators';\nimport { AuthResponse } from './auth-response';\nimport { User } from './user';\nimport { Storage } from '@ionic/storage';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n\n\n  endpoint  =  'http://localhost:8080/api/users/';\n\n  constructor(private  httpClient:  HttpClient, private  storage:  Storage) { }\n\n\n\n  register(user: User): Observable<AuthResponse> {\n    console.log('desde servicio:' + user);\n    return this.httpClient.post<AuthResponse>(this.endpoint, user, this.getOptions(user)).pipe(\n      tap(async (res:  AuthResponse ) => {\n\n        if (res.user) {\n          await this.storage.set('token', res.access_token);\n        }\n      })\n\n    );\n  }\n\n  login(user: User): Observable<AuthResponse> {\n    return this.httpClient.post(this.endpoint, null, this.getOptions(user)).pipe(\n      tap(async (res: AuthResponse) => {\n\n        if (res.user) {\n          await this.storage.set('token', res.access_token);\n\n          // await this.storage.set(\"idUser\", res.user.id);\n        }\n      })\n    );\n  }\n\n  async logout() {\n    await this.storage.remove('token');\n  }\n\n  async isLoggedIn() {\n    // return this.authSubject.asObservable();\n    const token = await this.storage.get('token');\n    if (token){ //Just check if exists. This should be checked with current date\n      return true;\n    }\n    return false;\n  }\n\n  private getOptions(user: User){\n    const base64UserAndPassword = window.btoa(user.username + ':' + user.password);\n\n    const basicAccess = 'Basic ' + base64UserAndPassword;\n\n    const options = {\n      headers: {\n        'Authorization' : basicAccess,\n        'Content-Type' : 'application/x-www-form-urlencoded',\n      }\n      //, withCredentials: true\n    };\n\n    return options;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}