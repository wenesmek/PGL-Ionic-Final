{"ast":null,"code":"import _asyncToGenerator from \"/home/zining/Data/Proyectos/Ionic/UT1-pgl/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth/auth.service';\nlet AuthGuardService = class AuthGuardService {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n\n  canActivate(route) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const logged = yield _this.authService.isLoggedIn();\n\n      if (!logged) {\n        _this.router.navigateByUrl('/login');\n      } else {\n        return logged;\n      }\n    })();\n  }\n\n};\n\nAuthGuardService.ctorParameters = () => [{\n  type: Router\n}, {\n  type: AuthService\n}];\n\nAuthGuardService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthGuardService);\nexport { AuthGuardService };","map":{"version":3,"mappings":";;AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,MAAT,QAA4D,iBAA5D;AACA,SAAQC,WAAR,QAA0B,sBAA1B;IAKaC,gBAAgB,SAAhBA,gBAAgB;EAE3BC,YAAoBC,MAApB,EAA4CC,WAA5C,EAAoE;IAAhD;IAAwB;EAA6B;;EACnEC,WAAW,CAACC,KAAD,EAA8B;IAAA;;IAAA;MAE7C,MAAMC,MAAM,SAAS,KAAI,CAACH,WAAL,CAAiBI,UAAjB,EAArB;;MACA,IAAG,CAACD,MAAJ,EAAW;QACT,KAAI,CAACJ,MAAL,CAAYM,aAAZ,CAA0B,QAA1B;MACD,CAFD,MAEK;QACH,OAAOF,MAAP;MACD;IAP4C;EAQ9C;;AAX0B;;;;;;;;AAAhBN,gBAAgB,eAH5BH,UAAU,CAAC;EACVY,UAAU,EAAE;AADF,CAAD,CAGkB,GAAhBT,gBAAgB,CAAhB;SAAAA","names":["Injectable","Router","AuthService","AuthGuardService","constructor","router","authService","canActivate","route","logged","isLoggedIn","navigateByUrl","providedIn"],"sourceRoot":"","sources":["/home/zining/Data/Proyectos/Ionic/UT1-pgl/frontend/src/app/services/auth-guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot } from '@angular/router';\nimport {AuthService} from '../auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardService {\n\n  constructor(private router: Router, private authService: AuthService) { }\n  async canActivate(route: ActivatedRouteSnapshot): Promise<boolean> {\n   \n    const logged = await this.authService.isLoggedIn();\n    if(!logged){\n      this.router.navigateByUrl('/login');\n    }else{\n      return logged;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}