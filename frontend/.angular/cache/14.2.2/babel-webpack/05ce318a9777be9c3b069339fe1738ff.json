{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Inject, PLATFORM_ID, InjectionToken, NgModule } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { defineDriver, createInstance, LOCALSTORAGE, WEBSQL, INDEXEDDB } from 'localforage';\nimport * as CordovaSQLiteDriver from 'localforage-cordovasqlitedriver';\nimport { _driver } from 'localforage-cordovasqlitedriver';\n/**\n * Storage is an easy way to store key/value pairs and JSON objects.\n * Storage uses a variety of storage engines underneath, picking the best one available\n * depending on the platform.\n *\n * When running in a native app context, Storage will prioritize using SQLite, as it's one of\n * the most stable and widely used file-based databases, and avoids some of the\n * pitfalls of things like localstorage and IndexedDB, such as the OS deciding to clear out such\n * data in low disk-space situations.\n *\n * When running in the web or as a Progressive Web App, Storage will attempt to use\n * IndexedDB, WebSQL, and localstorage, in that order.\n *\n * @usage\n * First, if you'd like to use SQLite, install the cordova-sqlite-storage plugin:\n * ```bash\n * ionic cordova plugin add cordova-sqlite-storage\n * ```\n *\n * Next, install the package (comes by default for Ionic apps > Ionic V1):\n * ```bash\n * npm install --save @ionic/storage\n * ```\n *\n * Next, add it to the imports list in your `NgModule` declaration (for example, in `src/app/app.module.ts`):\n *\n * ```typescript\n * import { IonicStorageModule } from '@ionic/storage';\n *\n * @NgModule({\n *   declarations: [\n *     // ...\n *   ],\n *   imports: [\n *     BrowserModule,\n *     IonicModule.forRoot(MyApp),\n *     IonicStorageModule.forRoot()\n *   ],\n *   bootstrap: [IonicApp],\n *   entryComponents: [\n *     // ...\n *   ],\n *   providers: [\n *     // ...\n *   ]\n * })\n * export class AppModule {}\n *```\n *\n * Finally, inject it into any of your components or pages:\n * ```typescript\n * import { Storage } from '@ionic/storage';\n\n * export class MyApp {\n *   constructor(private storage: Storage) { }\n *\n *   ...\n *\n *   // set a key/value\n *   storage.set('name', 'Max');\n *\n *   // Or to get a key/value pair\n *   storage.get('age').then((val) => {\n *     console.log('Your age is', val);\n *   });\n * }\n * ```\n *\n *\n * ### Configuring Storage\n *\n * The Storage engine can be configured both with specific storage engine priorities, or custom configuration\n * options to pass to localForage. See the localForage config docs for possible options: https://github.com/localForage/localForage#configuration\n *\n * Note: Any custom configurations will be merged with the default configuration\n *\n * ```typescript\n * import { IonicStorageModule } from '@ionic/storage';\n *\n * @NgModule({\n *   declarations: [...],\n *   imports: [\n *     IonicStorageModule.forRoot({\n *       name: '__mydb',\n         driverOrder: ['indexeddb', 'sqlite', 'websql']\n *     })\n *   ],\n *   bootstrap: [...],\n *   entryComponents: [...],\n *    providers: [...]\n * })\n * export class AppModule { }\n * ```\n */\n\nimport * as ɵngcc0 from '@angular/core';\nlet Storage = class Storage {\n  /**\n   * Create a new Storage instance using the order of drivers and any additional config\n   * options to pass to LocalForage.\n   *\n   * Possible driver options are: ['sqlite', 'indexeddb', 'websql', 'localstorage'] and the\n   * default is that exact ordering.\n   */\n  constructor(config, platformId) {\n    this.platformId = platformId;\n    this._driver = null;\n    this._dbPromise = new Promise((resolve, reject) => {\n      if (isPlatformServer(this.platformId)) {\n        const noopDriver = getNoopDriver();\n        resolve(noopDriver);\n        return;\n      }\n\n      let db;\n      const defaultConfig = getDefaultConfig();\n      const actualConfig = Object.assign(defaultConfig, config || {});\n      defineDriver(CordovaSQLiteDriver).then(() => {\n        db = createInstance(actualConfig);\n      }).then(() => db.setDriver(this._getDriverOrder(actualConfig.driverOrder))).then(() => {\n        this._driver = db.driver();\n        resolve(db);\n      }).catch(reason => reject(reason));\n    });\n  }\n  /**\n   * Get the name of the driver being used.\n   * @returns Name of the driver\n   */\n\n\n  get driver() {\n    return this._driver;\n  }\n  /**\n   * Reflect the readiness of the store.\n   * @returns Returns a promise that resolves when the store is ready\n   */\n\n\n  ready() {\n    return this._dbPromise;\n  }\n  /** @hidden */\n\n\n  _getDriverOrder(driverOrder) {\n    return driverOrder.map(driver => {\n      switch (driver) {\n        case 'sqlite':\n          return _driver;\n\n        case 'indexeddb':\n          return INDEXEDDB;\n\n        case 'websql':\n          return WEBSQL;\n\n        case 'localstorage':\n          return LOCALSTORAGE;\n      }\n    });\n  }\n  /**\n   * Get the value associated with the given key.\n   * @param key the key to identify this value\n   * @returns Returns a promise with the value of the given key\n   */\n\n\n  get(key) {\n    return this._dbPromise.then(db => db.getItem(key));\n  }\n  /**\n   * Set the value for the given key.\n   * @param key the key to identify this value\n   * @param value the value for this key\n   * @returns Returns a promise that resolves when the key and value are set\n   */\n\n\n  set(key, value) {\n    return this._dbPromise.then(db => db.setItem(key, value));\n  }\n  /**\n   * Remove any value associated with this key.\n   * @param key the key to identify this value\n   * @returns Returns a promise that resolves when the value is removed\n   */\n\n\n  remove(key) {\n    return this._dbPromise.then(db => db.removeItem(key));\n  }\n  /**\n   * Clear the entire key value store. WARNING: HOT!\n   * @returns Returns a promise that resolves when the store is cleared\n   */\n\n\n  clear() {\n    return this._dbPromise.then(db => db.clear());\n  }\n  /**\n   * @returns Returns a promise that resolves with the number of keys stored.\n   */\n\n\n  length() {\n    return this._dbPromise.then(db => db.length());\n  }\n  /**\n   * @returns Returns a promise that resolves with the keys in the store.\n   */\n\n\n  keys() {\n    return this._dbPromise.then(db => db.keys());\n  }\n  /**\n   * Iterate through each key,value pair.\n   * @param iteratorCallback a callback of the form (value, key, iterationNumber)\n   * @returns Returns a promise that resolves when the iteration has finished.\n   */\n\n\n  forEach(iteratorCallback) {\n    return this._dbPromise.then(db => db.iterate(iteratorCallback));\n  }\n\n};\nStorage = __decorate([__param(1, Inject(PLATFORM_ID))], Storage);\n/** @hidden */\n\nfunction getDefaultConfig() {\n  return {\n    name: '_ionicstorage',\n    storeName: '_ionickv',\n    dbKey: '_ionickey',\n    driverOrder: ['sqlite', 'indexeddb', 'websql', 'localstorage']\n  };\n}\n/** @hidden */\n\n\nconst StorageConfigToken = new InjectionToken('STORAGE_CONFIG_TOKEN');\n/** @hidden */\n\nfunction provideStorage(storageConfig, platformID) {\n  const config = !!storageConfig ? storageConfig : getDefaultConfig();\n  return new Storage(config, platformID);\n}\n\nfunction getNoopDriver() {\n  // noop driver for ssr environment\n  const noop = () => {};\n\n  const driver = {\n    getItem: noop,\n    setItem: noop,\n    removeItem: noop,\n    clear: noop,\n    length: () => 0,\n    keys: () => [],\n    iterate: noop\n  };\n  return driver;\n}\n\nvar IonicStorageModule_1;\nlet IonicStorageModule = IonicStorageModule_1 = class IonicStorageModule {\n  static forRoot(storageConfig = null) {\n    return {\n      ngModule: IonicStorageModule_1,\n      providers: [{\n        provide: StorageConfigToken,\n        useValue: storageConfig\n      }, {\n        provide: Storage,\n        useFactory: provideStorage,\n        deps: [StorageConfigToken, PLATFORM_ID]\n      }]\n    };\n  }\n\n};\n\nIonicStorageModule.ɵfac = function IonicStorageModule_Factory(t) {\n  return new (t || IonicStorageModule)();\n};\n\nIonicStorageModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: IonicStorageModule\n});\nIonicStorageModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IonicStorageModule, [{\n    type: NgModule\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { IonicStorageModule, Storage, StorageConfigToken, provideStorage as ɵa };","map":{"version":3,"names":["__decorate","__param","Inject","PLATFORM_ID","InjectionToken","NgModule","isPlatformServer","defineDriver","createInstance","LOCALSTORAGE","WEBSQL","INDEXEDDB","CordovaSQLiteDriver","_driver","ɵngcc0","Storage","constructor","config","platformId","_dbPromise","Promise","resolve","reject","noopDriver","getNoopDriver","db","defaultConfig","getDefaultConfig","actualConfig","Object","assign","then","setDriver","_getDriverOrder","driverOrder","driver","catch","reason","ready","map","get","key","getItem","set","value","setItem","remove","removeItem","clear","length","keys","forEach","iteratorCallback","iterate","name","storeName","dbKey","StorageConfigToken","provideStorage","storageConfig","platformID","noop","IonicStorageModule_1","IonicStorageModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps","ɵfac","IonicStorageModule_Factory","t","ɵmod","ɵɵdefineNgModule","type","ɵinj","ɵɵdefineInjector","ngDevMode","ɵsetClassMetadata","ɵa"],"sources":["/home/zining/Data/Proyectos/Ionic/UT1-pgl/frontend/node_modules/@ionic/storage/__ivy_ngcc__/fesm2015/ionic-storage.js"],"sourcesContent":["import { __decorate, __param } from 'tslib';\nimport { Inject, PLATFORM_ID, InjectionToken, NgModule } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { defineDriver, createInstance, LOCALSTORAGE, WEBSQL, INDEXEDDB } from 'localforage';\nimport * as CordovaSQLiteDriver from 'localforage-cordovasqlitedriver';\nimport { _driver } from 'localforage-cordovasqlitedriver';\n\n/**\n * Storage is an easy way to store key/value pairs and JSON objects.\n * Storage uses a variety of storage engines underneath, picking the best one available\n * depending on the platform.\n *\n * When running in a native app context, Storage will prioritize using SQLite, as it's one of\n * the most stable and widely used file-based databases, and avoids some of the\n * pitfalls of things like localstorage and IndexedDB, such as the OS deciding to clear out such\n * data in low disk-space situations.\n *\n * When running in the web or as a Progressive Web App, Storage will attempt to use\n * IndexedDB, WebSQL, and localstorage, in that order.\n *\n * @usage\n * First, if you'd like to use SQLite, install the cordova-sqlite-storage plugin:\n * ```bash\n * ionic cordova plugin add cordova-sqlite-storage\n * ```\n *\n * Next, install the package (comes by default for Ionic apps > Ionic V1):\n * ```bash\n * npm install --save @ionic/storage\n * ```\n *\n * Next, add it to the imports list in your `NgModule` declaration (for example, in `src/app/app.module.ts`):\n *\n * ```typescript\n * import { IonicStorageModule } from '@ionic/storage';\n *\n * @NgModule({\n *   declarations: [\n *     // ...\n *   ],\n *   imports: [\n *     BrowserModule,\n *     IonicModule.forRoot(MyApp),\n *     IonicStorageModule.forRoot()\n *   ],\n *   bootstrap: [IonicApp],\n *   entryComponents: [\n *     // ...\n *   ],\n *   providers: [\n *     // ...\n *   ]\n * })\n * export class AppModule {}\n *```\n *\n * Finally, inject it into any of your components or pages:\n * ```typescript\n * import { Storage } from '@ionic/storage';\n\n * export class MyApp {\n *   constructor(private storage: Storage) { }\n *\n *   ...\n *\n *   // set a key/value\n *   storage.set('name', 'Max');\n *\n *   // Or to get a key/value pair\n *   storage.get('age').then((val) => {\n *     console.log('Your age is', val);\n *   });\n * }\n * ```\n *\n *\n * ### Configuring Storage\n *\n * The Storage engine can be configured both with specific storage engine priorities, or custom configuration\n * options to pass to localForage. See the localForage config docs for possible options: https://github.com/localForage/localForage#configuration\n *\n * Note: Any custom configurations will be merged with the default configuration\n *\n * ```typescript\n * import { IonicStorageModule } from '@ionic/storage';\n *\n * @NgModule({\n *   declarations: [...],\n *   imports: [\n *     IonicStorageModule.forRoot({\n *       name: '__mydb',\n         driverOrder: ['indexeddb', 'sqlite', 'websql']\n *     })\n *   ],\n *   bootstrap: [...],\n *   entryComponents: [...],\n *    providers: [...]\n * })\n * export class AppModule { }\n * ```\n */\nimport * as ɵngcc0 from '@angular/core';\nlet Storage = class Storage {\n    /**\n     * Create a new Storage instance using the order of drivers and any additional config\n     * options to pass to LocalForage.\n     *\n     * Possible driver options are: ['sqlite', 'indexeddb', 'websql', 'localstorage'] and the\n     * default is that exact ordering.\n     */\n    constructor(config, platformId) {\n        this.platformId = platformId;\n        this._driver = null;\n        this._dbPromise = new Promise((resolve, reject) => {\n            if (isPlatformServer(this.platformId)) {\n                const noopDriver = getNoopDriver();\n                resolve(noopDriver);\n                return;\n            }\n            let db;\n            const defaultConfig = getDefaultConfig();\n            const actualConfig = Object.assign(defaultConfig, config || {});\n            defineDriver(CordovaSQLiteDriver)\n                .then(() => {\n                db = createInstance(actualConfig);\n            })\n                .then(() => db.setDriver(this._getDriverOrder(actualConfig.driverOrder)))\n                .then(() => {\n                this._driver = db.driver();\n                resolve(db);\n            })\n                .catch((reason) => reject(reason));\n        });\n    }\n    /**\n     * Get the name of the driver being used.\n     * @returns Name of the driver\n     */\n    get driver() {\n        return this._driver;\n    }\n    /**\n     * Reflect the readiness of the store.\n     * @returns Returns a promise that resolves when the store is ready\n     */\n    ready() {\n        return this._dbPromise;\n    }\n    /** @hidden */\n    _getDriverOrder(driverOrder) {\n        return driverOrder.map((driver) => {\n            switch (driver) {\n                case 'sqlite':\n                    return _driver;\n                case 'indexeddb':\n                    return INDEXEDDB;\n                case 'websql':\n                    return WEBSQL;\n                case 'localstorage':\n                    return LOCALSTORAGE;\n            }\n        });\n    }\n    /**\n     * Get the value associated with the given key.\n     * @param key the key to identify this value\n     * @returns Returns a promise with the value of the given key\n     */\n    get(key) {\n        return this._dbPromise.then((db) => db.getItem(key));\n    }\n    /**\n     * Set the value for the given key.\n     * @param key the key to identify this value\n     * @param value the value for this key\n     * @returns Returns a promise that resolves when the key and value are set\n     */\n    set(key, value) {\n        return this._dbPromise.then((db) => db.setItem(key, value));\n    }\n    /**\n     * Remove any value associated with this key.\n     * @param key the key to identify this value\n     * @returns Returns a promise that resolves when the value is removed\n     */\n    remove(key) {\n        return this._dbPromise.then((db) => db.removeItem(key));\n    }\n    /**\n     * Clear the entire key value store. WARNING: HOT!\n     * @returns Returns a promise that resolves when the store is cleared\n     */\n    clear() {\n        return this._dbPromise.then((db) => db.clear());\n    }\n    /**\n     * @returns Returns a promise that resolves with the number of keys stored.\n     */\n    length() {\n        return this._dbPromise.then((db) => db.length());\n    }\n    /**\n     * @returns Returns a promise that resolves with the keys in the store.\n     */\n    keys() {\n        return this._dbPromise.then((db) => db.keys());\n    }\n    /**\n     * Iterate through each key,value pair.\n     * @param iteratorCallback a callback of the form (value, key, iterationNumber)\n     * @returns Returns a promise that resolves when the iteration has finished.\n     */\n    forEach(iteratorCallback) {\n        return this._dbPromise.then((db) => db.iterate(iteratorCallback));\n    }\n};\nStorage = __decorate([\n    __param(1, Inject(PLATFORM_ID))\n], Storage);\n/** @hidden */\nfunction getDefaultConfig() {\n    return {\n        name: '_ionicstorage',\n        storeName: '_ionickv',\n        dbKey: '_ionickey',\n        driverOrder: ['sqlite', 'indexeddb', 'websql', 'localstorage'],\n    };\n}\n/** @hidden */\nconst StorageConfigToken = new InjectionToken('STORAGE_CONFIG_TOKEN');\n/** @hidden */\nfunction provideStorage(storageConfig, platformID) {\n    const config = !!storageConfig ? storageConfig : getDefaultConfig();\n    return new Storage(config, platformID);\n}\nfunction getNoopDriver() {\n    // noop driver for ssr environment\n    const noop = () => { };\n    const driver = {\n        getItem: noop,\n        setItem: noop,\n        removeItem: noop,\n        clear: noop,\n        length: () => 0,\n        keys: () => [],\n        iterate: noop,\n    };\n    return driver;\n}\n\nvar IonicStorageModule_1;\nlet IonicStorageModule = IonicStorageModule_1 = class IonicStorageModule {\n    static forRoot(storageConfig = null) {\n        return {\n            ngModule: IonicStorageModule_1,\n            providers: [\n                { provide: StorageConfigToken, useValue: storageConfig },\n                {\n                    provide: Storage,\n                    useFactory: provideStorage,\n                    deps: [StorageConfigToken, PLATFORM_ID]\n                }\n            ]\n        };\n    }\n};\nIonicStorageModule.ɵfac = function IonicStorageModule_Factory(t) { return new (t || IonicStorageModule)(); };\nIonicStorageModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: IonicStorageModule });\nIonicStorageModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IonicStorageModule, [{\n        type: NgModule\n    }], null, null); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { IonicStorageModule, Storage, StorageConfigToken, provideStorage as ɵa };\n\n"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,cAA9B,EAA8CC,QAA9C,QAA8D,eAA9D;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,YAAvC,EAAqDC,MAArD,EAA6DC,SAA7D,QAA8E,aAA9E;AACA,OAAO,KAAKC,mBAAZ,MAAqC,iCAArC;AACA,SAASC,OAAT,QAAwB,iCAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,IAAIC,OAAO,GAAG,MAAMA,OAAN,CAAc;EACxB;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,MAAD,EAASC,UAAT,EAAqB;IAC5B,KAAKA,UAAL,GAAkBA,UAAlB;IACA,KAAKL,OAAL,GAAe,IAAf;IACA,KAAKM,UAAL,GAAkB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MAC/C,IAAIhB,gBAAgB,CAAC,KAAKY,UAAN,CAApB,EAAuC;QACnC,MAAMK,UAAU,GAAGC,aAAa,EAAhC;QACAH,OAAO,CAACE,UAAD,CAAP;QACA;MACH;;MACD,IAAIE,EAAJ;MACA,MAAMC,aAAa,GAAGC,gBAAgB,EAAtC;MACA,MAAM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"},"metadata":{},"sourceType":"module"}